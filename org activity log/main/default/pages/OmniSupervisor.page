<apex:page showHeader="false" standardStylesheets="false" sidebar="false" applyHtmlTag="false" applyBodyTag="false" docType="html-5.0">
    
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <apex:slds ></apex:slds>
        
        <head>
            
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"> </script> 
            <script src="https://code.highcharts.com/highcharts.js"> </script>
            
            <style>social_icons
                .demo-agent--status-indicator {
                width: 12px;
                height: 12px;
                display: inline-block;
                border-radius: 50%;
                }
                
                .demo-agent--status-indicator.demo-agent--status-indicator-available { background: #51A87A; }
                .demo-agent--status-indicator.demo-agent--status-indicator-busy { background: #E36028; }
                .demo-agent--status-indicator.demo-agent--status-indicator-away { background: #FFB128; }
                
                /* hide first item */
                .demo-agent--row-hidden { display: none; }
                
                .slds-tabs--default__item.slds-active a { border-color: #0070d2; }
                
                aside {
                border:1px solid #ececec;
                border-radius:3px;
                overflow:hidden;
                margin-top:10px;
                height:300px;
                padding-top:15px !important;
                }
                
                .slds .slds-card {
                background: white !important;
                position:relative;
                }
                
                .graph1label{
                font-size: 33px;
                font-family: Salesforce Sans;
                text-align: center;
                position: absolute;
                top: 118px;
                left: 0;
                height: 100%;
                width: 100%;
                }
                .graph1label .subtitle{
                font-size:12px
                }
                
                #Queue{
                display: none;
                }
                
                #Agents{
                }                
                
            </style>
            
        </head>
        
        <apex:remoteObjects >
            <apex:remoteObjectModel name="User" fields="Id,FirstName,LastName,Name,ProfileId,IsActive,Omni_Supervisor__c,FullPhotoUrl" />
        </apex:remoteObjects>
        
        <body style="margin: 0;">
            
            <!-- REQUIRED SLDS WRAPPER -->
            <div class="slds-scope">
                
                <div class="slds-tabs--scoped">
                    
                    <div class="tab">
                        <ul class="slds-tabs--scoped__nav" role="tablist">
                            <li id="Agent-Tab" class="slds-tabs--scoped__item slds-text-heading--label slds-active" title="Agents" role="presentation" onClick="agentTab();"><a class="slds-tabs--scoped__link" href="#void" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-scoped-1" id="tab-scoped-1__item">Agents</a></li>
                            <li id="Queue-Tab" class="slds-tabs--scoped__item slds-text-heading--label" title="Queues" role="presentation" onClick="queueTab();"><a class="slds-tabs--scoped__link" href="#void" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-2" id="tab-scoped-2__item">Queues</a></li>
                            <li class="slds-tabs--scoped__item slds-text-heading--label" title="Work" role="presentation"><a class="slds-tabs--scoped__link" href="#void" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-3" id="tab-scoped-3__item">Work</a></li>
                        </ul>
                    </div>
                </div>
                
                
                
                <!-- -------------------------------------------------------------------- START TAB FOR AGENT --------------------------------------------------------------------------------- -->
                <div id="Agents" class="tabcontent">                        
                    <div id="tab-scoped-1" class="slds-tabs--scoped__content slds-show" role="tabpanel" aria-labelledby="tab-scoped-1__item">
                        <div class="slds-text-heading--medium">
                            <svg aria-hidden="true" class="slds-icon slds-icon-standard-account">
                                <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/standard-sprite/svg/symbols.svg#team_member')}"></use>
                            </svg>
                            <span class="slds-m-left--x-small">Agent Summary</span>
                        </div>
                        
                        <!-- INNER TABS -->
                        <div class="slds-tabs--default">
                            <ul class="slds-tabs--default__nav" role="tablist">
                                <li class="slds-tabs--default__item slds-text-heading--label slds-active" title="Item One" role="presentation">
                                    <a class="slds-tabs--default__link" href="#void" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-default-1" id="tab-default-1__item">All Agents</a>
                                </li>
                                <li class="slds-tabs--default__item slds-text-heading--label" title="Item Two" role="presentation">
                                    <a class="slds-tabs--default__link" href="#void" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-default-2" id="tab-default-2__item">Agents by Queue</a>
                                </li>
                            </ul>
                            <div id="tab-default-1" class="slds-tabs--default__content slds-show" role="tabpanel" aria-labelledby="tab-default-1__item">
                                <table class="slds-table slds-table--striped" id="agent-table">
                                    <thead>
                                        <tr class="slds-text-heading--label">
                                            <th scope="col">
                                                <span>Agent</span>
                                                <button class="slds-button slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#sort')}"></use>
                                                    </svg>
                                                </button>
                                                <button class="slds-button slds-button--icon-border-filled slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/action-sprite/svg/symbols.svg#filter')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <span class="slds-truncate">Status</span>
                                                <button class="slds-button slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#sort')}"></use>
                                                    </svg>
                                                </button>
                                                <button class="slds-button slds-button--icon-border-filled slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/action-sprite/svg/symbols.svg#filter')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <span class="slds-truncate">Time in State</span>
                                                <button class="slds-button slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#sort')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <span class="slds-truncate">Time Since Login</span>
                                                <button class="slds-button slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#sort')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <span class="slds-truncate">Time Since Last Accept</span>
                                                <button class="slds-button slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#sort')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <span class="slds-truncate">Channels</span>
                                                <button class="slds-button slds-button--icon-border-filled slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/action-sprite/svg/symbols.svg#filter')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <span class="slds-truncate">Assigned Queues</span>
                                            </th>
                                            <th scope="col">
                                                <span class="slds-truncate">Work Items</span>
                                                <button class="slds-button slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#sort')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <span class="slds-truncate">Workload</span>
                                                <button class="slds-button slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#sort')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <span class="slds-truncate">Capacity</span>
                                                <button class="slds-button slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#sort')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- INJECTED TABLES GO HERE -->
                                    </tbody>
                                </table>
                                
                            </div>
                        </div>
                    </div>
                </div>
                <!-- -------------------------------------------------------------------- END TAB FOR AGENT --------------------------------------------------------------------------------- -->
                
                
                
                <!-- -------------------------------------------------------------------- START TAB FOR QUEUE --------------------------------------------------------------------------------- -->
                <div id="Queue" class="tabcontent">                    
                    <div id="tab-scoped-1" class="slds-tabs--scoped__content slds-show" role="tabpanel" aria-labelledby="tab-scoped-1__item">
                        <div class="slds-text-heading--medium">
                            <svg aria-hidden="true" class="slds-icon slds-icon-standard-account">
                                <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/standard-sprite/svg/symbols.svg#team_member')}"></use>
                            </svg>
                            <span class="slds-m-left--x-small"> Queues Summary</span>
                        </div>
                        
                        <!-- INNER TABS -->
                        <div class="slds-tabs--default">
                            <div id="tab-default-1" class="slds-tabs--default__content slds-show" role="tabpanel" aria-labelledby="tab-default-1__item">
                                
                                
                                <table class="slds-table slds-table--striped">
                                    <thead>
                                        <tr class="slds-text-heading--label">
                                            
                                            <th scope="col">
                                                <span> Queue </span>
                                                <button class="slds-button slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#sort')}"></use>
                                                    </svg>
                                                </button>
                                                <button class="slds-button slds-button--icon-border-filled slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/action-sprite/svg/symbols.svg#filter')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            
                                            <th scope="col">
                                                <span class="slds-truncate">Priority</span>
                                                <button class="slds-button slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#sort')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            
                                            <th scope="col">
                                                <span class="slds-truncate">Work Size</span>
                                                <button class="slds-button slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#sort')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            
                                            <th scope="col">
                                                <span class="slds-truncate">Type</span>
                                                <button class="slds-button slds-button--icon-border-filled slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/action-sprite/svg/symbols.svg#filter')}"></use>
                                                    </svg>
                                                </button>
                                            </th>
                                            
                                        </tr>
                                    </thead>
                                    
                                    
                                    
                                    
                                    
                                    <tbody>
                                        <tr class="demo-agent--row">
                                            <td class="demo-agent--channels" id="CHANNELS">
                                                Email
                                            </td>  
                                            <td class="demo-agent--work-items" id="WORKITEMS">
                                                1
                                            </td> 
                                            <td class="demo-agent--workload" id="WORKLOAD">
                                                2 units
                                                <button class="slds-m-left--small slds-button slds-button--icon-border-filled slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#down")}"></use>
                                                    </svg>
                                                </button>
                                            </td>       
                                            <td class="demo-agent--assigned-queues" id="QUEUE">
                                                <svg style="margin-left: -6px; fill: #4BC076;" aria-hidden="true" class="slds-icon slds-icon--medium slds-icon-text-default">
                                                    <use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/standard-sprite/svg/symbols.svg#email")}"></use>
                                                </svg>                               
                                            </td>
                                        </tr>
                                        
                                        
                                        <tr class="demo-agent--row">
                                            <td class="demo-agent--channels" id="CHANNELS">
                                                IoT
                                            </td>  
                                            <td class="demo-agent--work-items" id="WORKITEMS">
                                                1
                                            </td> 
                                            <td class="demo-agent--workload" id="WORKLOAD">
                                                1 units 
                                                <button class="slds-m-left--small slds-button slds-button--icon-border-filled slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#down")}"></use>
                                                    </svg>
                                                </button>
                                            </td>
                                            <td class="demo-agent--assigned-queues" id="QUEUE">
                                                <svg style="margin-left: -6px; fill: #4BC076;" aria-hidden="true" class="slds-icon slds-icon--medium slds-icon-text-default">
                                                    <use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/standard-sprite/svg/symbols.svg#environment_hub")}"></use>
                                                </svg>                                                           
                                            </td>
                                        </tr>
                                        
                                        
                                        <tr class="demo-agent--row">
                                            <td class="demo-agent--channels" id="CHANNELS">
                                                Phone
                                            </td>  
                                            <td class="demo-agent--work-items" id="WORKITEMS">
                                                2
                                            </td> 
                                            <td class="demo-agent--workload" id="WORKLOAD">
                                                3 units
                                                <button class="slds-m-left--small slds-button slds-button--icon-border-filled slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#down")}"></use>
                                                    </svg>
                                                </button>
                                            </td>      
                                            <td class="demo-agent--assigned-queues" id="QUEUE">
                                                <svg style="margin-left: -6px; fill: #4BC076;" aria-hidden="true" class="slds-icon slds-icon--medium slds-icon-text-default">
                                                    <use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#call")}"></use>
                                                </svg>                                                                 
                                            </td>
                                        </tr>
                                        
                                        
                                        <tr class="demo-agent--row">
                                            <td class="demo-agent--channels" id="TYPE">
                                                Web
                                            </td>
                                            <td class="demo-agent--work-items" id="PRIORITY">
                                                2
                                            </td>   
                                            <td class="demo-agent--workload" id="WORKSIZE">
                                                3 units 
                                                <button class="slds-m-left--small slds-button slds-button--icon-border-filled slds-button--icon-x-small">
                                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#down")}"></use>
                                                    </svg>
                                                </button>
                                            </td>    
                                            <td class="demo-agent--assigned-queues" id="QUEUE">
                                                <svg style="margin-left: -6px; fill: #4BC076;" aria-hidden="true" class="slds-icon slds-icon--medium slds-icon-text-default">
                                                    <use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/standard-sprite/svg/symbols.svg#calibration")}"></use>
                                                </svg>                              
                                            </td>
                                        </tr>   
                                        
                                        
                                    </tbody>
                                    
                                    
                                </table>
                                
                            </div>
                        </div>
                    </div>
                </div>
                
                
            </div>             
            
            
            
            <!-- JAVASCRIPT -->
            <script>
            
            var totalQueues;
            
            /* -------------------------------------------------------------------- TAB FOR AGENT js --------------------------------------------------------------------------------- */
            var queueTab = function(){
                var queueTable = $('#Queue');
                var agentTable = $('#Agents');
                var tabAgent = $('#Agent-Tab');
                var tabQueue = $('#Queue-Tab');       
                
                tabAgent.removeClass("slds-active")
                tabQueue.addClass("slds-active")
                
                queueTable.show();
                agentTable.hide();
                
            };
            
            var agentTab = function(){
                var queueTable = $('#Queue');
                var agentTable = $('#Agents');
                var tabAgent = $('#Agent-Tab');
                var tabQueue = $('#Queue-Tab');
                
                tabAgent.addClass("slds-active")
                tabQueue.removeClass("slds-active")
                
                queueTable.hide();
                agentTable.show();
                
            };
            
            
            
            
            
            // TODO: Use jQuery instead of document.querySelector since we added it anyway
            var nUsers = 14;
            var maxTimeSinceLogin = 120;
            var maxLoad = 2;
            
            
            // var $onlineLink = $('.onlineStatusItem a', window.parent.document).first();
            // var $offlineLink = $('.offlineStatusItem a', window.parent.document);
            
            // $onlineLink.on('click', function () {
            //   var $firstRow = $('.demo-agent--row').first();
            //   var $stateTimer = $firstRow.find('.demo-agent--time-in-state').find('.demo-timer');
            //   var $acceptTimer = $firstRow.find('.demo-agent--time-since-last-accept').find('.demo-timer');
            //   // reset timer
            //   $stateTimer.attr('data-start-seconds', 0);
            //   $acceptTimer.removeAttr('data-start-seconds').removeClass('demo-timer').html('--');
            
            //   setTimeout(function () {
            //     $firstRow.removeClass('demo-agent--row-hidden');
            //   }, 1000);
            // });
            
            // $offlineLink.on('click', function () {
            //   var $firstRow = $('.demo-agent--row').first();
            //   $firstRow.addClass('demo-agent--row-hidden');
            // });
            
            // helpers for creating new users
            var maleFirstNames = ['Noah', 'Liam', 'Mason', 'Jacob', 'William', 'Ethan', 'Michael', 'Alexander', 'James', 'Daniel', 'Elijah', 'Benjamin', 'Logan', 'Aiden', 'Jayden'];
            var femaleFirstNames = ['Emma', 'Olivia', 'Sophia', 'Isabella', 'Ava', 'Mia', 'Emily', 'Abigail', 'Madison', 'Charlotte', 'Harper', 'Sofia', 'Avery', 'Elizabeth', 'Amelia'];
            var lastNames = ['Smith', 'Brown', 'Johnson', 'Jones', 'Williams', 'Davis', 'Miller', 'Wilson', 'Taylor', 'Clark', 'White', 'Moore', 'Thompson', 'Allen', 'Martin'];
            
            var getRandomName = function (namesList) {
                return namesList[~~(Math.random() * namesList.length)];
            };
            
            var getDefaultTimes = function () {
                var timeSinceLogin = ~~(Math.random() * maxTimeSinceLogin);
                var timeInState = timeSinceLogin - ~~(Math.random() * timeSinceLogin);
                
                return {
                    timeSinceLogin: timeSinceLogin,
                    timeInState: timeInState,
                    timeSinceLastAccept: ~~(Math.random() * timeInState)
                }
            };
            
            // if assigned queues / cases are to match update this fn
            var getChannels = function () {
                var availableChannels = ['call', 'web', 'phone_portrait', 'email'];
                // var usersChannelLength = 1 + ~~(Math.random() * availableChannels.length);
                var usersChannel = availableChannels[~~(Math.random() * availableChannels.length)];
                return [usersChannel]
            };
            
            var getQueues = function (channels) {
                return channels.map(function (channel) {
                    switch(channel) {
                        case 'call': return 'Phone';
                        case 'web': return 'Web';
                        case 'phone_portrait': return 'IoT';
                        case 'email': return 'Email';
                        default: return '--';
                    }
                });
            };
            
            var getItems = function () {
                return ~~(Math.random() * (maxItems + 1));
            };
            
            var getLoad = function () {
                var randLoad = Math.random();
                if(randLoad < 0.9) return maxLoad; // 90% chance for "High"
                else if(randLoad < 0.95) return maxLoad / 2; // 10% chance for Medium
                    else return 0; // 5% chance for Low
            };
            
            // iterator that gets the next avatar
            var nextAvatar = (function () {
                var currentMaleId = 0, currentFemaleId = 0;
                return function (gender) {
                    if(currentFemaleId > 35) currentFemaleId = 0;
                    if(currentMaleId > 50) currentMaleId = 0;
                    return gender === 'male' ? ++currentMaleId : ++currentFemaleId;
                };
            }());
            
            var getAvatar = function (avatarGender) {
                var avatarNumber = nextAvatar(avatarGender);
                var jpgStr = 'avatars_' + avatarGender + '/00' + (avatarNumber >= 10 ? avatarNumber : '0' + avatarNumber) + '.jpg';
                var urlStr = avatarGender === 'male' ? "{!URLFOR($Resource.avatars_male, '/')}" : "{!URLFOR($Resource.avatars_female, '/')}";
                return "<img src='" + urlStr + jpgStr + "' />";
            };
            
            var getStatus = function () {
                var statuses = ['Available', 'Busy', 'Away'];
                
                var randStat = Math.random() * statuses.length;
                // 20% chance of being Busy
                if(randStat < 0.2) return 'Available';
                // 20% chance of being Away
                else if (randStat < 0.4) return 'Away';
                // 60% chance Available
                return 'Busy';
            };
            
            var getGender = function () {
                return Math.random() > 0.5 ? 'female' : 'male';
            };
            
            var generateAdditionalUsers = function (originalList) {
                var usersList = originalList;
                var user;
                while(usersList.length <= nUsers) {
                    user = {};
                    user.gender = getGender();
                    user.firstName = user.gender === 'female' ? getRandomName(femaleFirstNames) : getRandomName(maleFirstNames);
                    user.lastName = getRandomName(lastNames);
                    user.status = getStatus();
                    user.channels = getChannels();
                    user.queues = getQueues(user.channels);
                    user.defaultTimes = getDefaultTimes();
                    user.load = getLoad();
                    user.items = user.load;
                    
                    usersList.push(user);
                }
                // make the logged in user the first one in the list
                var orderedUsersList = [];
                usersList.forEach(function (user) {
                    user.id === "{!$User.Id}" ? orderedUsersList.unshift(user) : orderedUsersList.push(user);
                });
                
                orderedUsersList[0].status = 'Available';
                orderedUsersList[0].channels = ['phone_portrait'];
                orderedUsersList[0].queues = getQueues(orderedUsersList[0].channels);
                orderedUsersList[0].load = 1;
                orderedUsersList[0].items = orderedUsersList[0].load;
                
                return orderedUsersList;
            };
            
            var fetchUsers = function(callback) {
                var usersModel = new SObjectModel.User();
                var users = [], user;
                
                var query = { where: { IsActive: { eq: true }, Omni_Supervisor__c: { eq: true } } };
                
                usersModel.retrieve(query, function(err, records) {
                    if(err) alert(err.message);
                    else {
                        // if there are no users that match the query, generate the users now
                        if(!records.length && callback) return callback(generateAdditionalUsers(users));
                        
                        records.forEach(function(record, idx) {
                            user = {};
                            // props from force
                            user.firstName = record.get('FirstName');
                            user.lastName = record.get('LastName');
                            user.name = record.get('Name');
                            user.id = record.get('Id');
                            user.profileId = record.get('ProfileId');
                            user.avatar = record.get('FullPhotoUrl');
                            
                            // added props to user object (fake stuff)
                            user.status = getStatus();
                            user.gender = getGender();
                            user.channels = getChannels();
                            user.queues = getQueues(user.channels);
                            user.defaultTimes = getDefaultTimes();
                            user.load = getLoad();
                            user.items = user.load;
                            
                            users.push(user);
                            if(idx === records.length - 1 && callback) {
                                if(records.length >= nUsers) {
                                    return callback(users);
                                } else {
                                    return callback(generateAdditionalUsers(users))
                                }
                            }
                        });
                    }
                });
            };
            
            // formatting for table helpers
            // status == 'Available' returns demo-agent--status-indicator-available
            // make sure there's a matching class for indicator background color
            var statusClass = function(input) {
                return 'demo-agent--status-indicator-' + input.toLowerCase();
            };
            
            var channelIcons = function (channels) {
                return channels.map(function (channel) {
                    switch(channel) {
                        case 'email':
                            return [
                                '<svg style="margin-left: -6px; fill: #4BC076;" aria-hidden="true" class="slds-icon slds-icon--medium slds-icon-text-default">',
                                '<use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/standard-sprite/svg/symbols.svg#email")}"></use>',
                                '</svg>'
                            ].join('');
                        case 'phone_portrait':
                            return [
                                '<svg style="margin-left: -5px; height:28px; width: 28px;" aria-hidden="true" class="slds-icon slds-icon--medium slds-icon-text-default">',
                                '<use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/standard-sprite/svg/symbols.svg#environment_hub")}"></use>',
                                '</svg>'
                            ].join('');
                        case 'call':
                            return [
                                '<svg style="margin-left: -6px; fill: #4BC076;" aria-hidden="true" class="slds-icon slds-icon--medium slds-icon-text-default">',
                                '<use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/standard-sprite/svg/symbols.svg#' + channel + '")}"></use>',
                                '</svg>'
                            ].join('');
                        case 'web':
                            return [
                                '<svg style="margin-left: -6px; fill: #4BC076;" aria-hidden="true" class="slds-icon slds-icon--medium slds-icon-text-default">',
                                '<use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/standard-sprite/svg/symbols.svg#calibration")}"></use>',
                                '</svg>'
                            ].join('');
                        default :
                            return [
                                '<svg style="margin-left: -6px; fill: #F88962" aria-hidden="true" class="slds-icon slds-icon--medium slds-icon-text-default">',
                                '<use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/standard-sprite/svg/symbols.svg#' + channel + '")}"></use>',
                                '</svg>'
                            ].join('');
                    }
                }).join('');
            };
            
            var queuesList = function (queues) {
                var uniqueQueues = [];
                queues.forEach(function (queue) {
                    if(uniqueQueues.indexOf(queue) <= -1) uniqueQueues.push(queue);
                });
                
                return uniqueQueues.join(', ');
            };
            
            var addTableRows = function (users, callback) {
                var $tableElement = $('#agent-table');
                var $tBodyElement = $tableElement.find('tbody');
                var $tRowElement, tRowContent, rowData, tCellElement;
                
                users.forEach(function (user, idx) {
                    $tRowElement = $('<tr class="demo-agent--row"></tr>');
                    // if(idx === 0) $tRowElement.addClass('demo-agent--row-hidden');
                    tRowContent = [
                        '<td class="demo-agent--user">',
                        '<span class="slds-avatar slds-avatar--circle slds-avatar--small">',
                        user.avatar && user.avatar !== 'undefined' ? '<img src="' + user.avatar + '" />' : getAvatar(user.gender),
                        '</span>',
                        '<span class="slds-m-left--small"><a href="#">',
                        (user.firstName && user.firstName !== 'undefined' ? user.firstName : ''),
                        (user.lastName && user.lastName !== 'undefined' ? ' ' + user.lastName : ''),
                        '</a></span>',
                        '</td>',
                        
                        '<td class="demo-agent--status">',
                        '<span class="slds-m-right--small demo-agent--status-indicator ' + statusClass(user.status) + '"></span>',
                        user.status,
                        '</td>',
                        
                        '<td class="demo-agent--time-in-state"><span class="demo-timer" data-start-seconds="' + user.defaultTimes.timeInState +'"></span></td>',
                        
                        '<td class="demo-agent--time-since-login"><span class="demo-timer" data-start-seconds="' + user.defaultTimes.timeSinceLogin +'"></span></td>',
                        
                        '<td class="demo-agent--time-since-last-accept"><span class="demo-timer" data-start-seconds="' + user.defaultTimes.timeSinceLastAccept +'"></span></td>',
                        
                        '<td class="demo-agent--channels">',
                        channelIcons(user.channels),
                        '</td>',
                        
                        '<td class="demo-agent--assigned-queues">',
                        queuesList(user.queues),
                        '</td>',
                        
                        '<td class="demo-agent--work-items">',
                        user.items,
                        '<button class="slds-m-left--small slds-button slds-button--icon-border-filled slds-button--icon-x-small">',
                        '<svg aria-hidden="true" class="slds-button__icon slds-button__icon--hint slds-button__icon--small">',
                        '<use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#down")}"></use>',
                        '</svg>',
                        '</button>',
                        '</td>',
                        
                        '<td class="demo-agent--workload">',
                        
                        user.load,
                        ' / ' + maxLoad + '</td>',
                        '<td class="demo-agent--capacity">'+Math.floor(user.load/maxLoad)*100+'%</td>'
                    ].join('');
                    
                    $tRowElement.append(tRowContent);
                    $tBodyElement.append($tRowElement);
                });
                
                if(callback) callback();
            };
            
            var formatTime = function (timeInSeconds) {
                var mins = ~~(timeInSeconds / 60);
                var secs = timeInSeconds - (mins * 60);
                return mins + 'm ' + secs + 's';
            };
            
            var updateTimers = function (timeout) {
                if(timeout) clearTimeout(timeout);
                var timers = [].slice.call(document.querySelectorAll('.demo-timer'));
                var nextTime;
                timers.forEach(function(timer) {
                    nextTime = +timer.getAttribute('data-start-seconds') + 1;
                    timer.setAttribute('data-start-seconds', nextTime);
                    timer.innerHTML = formatTime(nextTime);
                });
                
                var timeout = setTimeout(function () {
                    if(timeout) clearTimeout(timeout);
                    updateTimers(timeout);
                }, 1000);
            };
            
            var addCharts = function(users) {
                var counts = {};
                var capacity;
                // fill with zeros initial counts
                ['Low', 'Medium', 'High'].forEach(function (label) { counts[label] = 0; });
                
                users.forEach(function (user) {
                    counts[user.status] = counts[user.status] ? counts[user.status] + 1 : 1; // Availability
                    capacity = user.load / maxLoad;
                    
                    if(capacity < 0.33) { counts['Low'] += 1; }
                    else if (capacity < 0.67) { counts['Medium'] += 1; }
                        else { counts['High'] += 1; }
                    
                });
                
                var colors = {
                    available: '#51A87A',
                    away: '#FFB128',
                    busy: '#E36028'
                };
                
                var initialAvailabilityData = [
                    { color: colors.available, name: "Available", y: 33.3333 },
                    { color: colors.away, name: "Away", y: 33.3333 },
                    { color: colors.busy, name: 'Busy', y: 33.3333 }
                ];
                
                var updatedAvailabilityData = [
                    { color: colors.available, name: "Available", y: ~~((counts['Available'] / users.length) * 100) },
                    { color: colors.away, name: "Away", y: ~~((counts['Away'] / users.length) * 100) },
                    { color: colors.busy, name: 'Busy', y: ~~((counts['Busy'] / users.length) * 100) }
                ];
                
                // 20, 50, 30
                var initialCapacityData = [
                    { color: colors.available, name: "Low", y: 20 },
                    { color: colors.away, name: "Medium", y: 50 },
                    { color: colors.busy, name: 'High', y: 30 }
                ];
                
                var updatedCapacityData = [
                    { color: colors.available, name: "Low", y: ~~((counts['Low'] / users.length) * 100) },
                    { color: colors.away, name: "Medium", y: ~~((counts['Medium'] / users.length) * 100) },
                    { color: colors.busy, name: 'High', y: ~~((counts['High'] / users.length) * 100) }
                ];
                
                var initialChannelData = [
                    { y:28,color:'#43AED4'},
                    { y:20,color:'#43AED4'},
                    { y:19,color:'#43AED4'},
                    { y:14,color:'#43AED4'},
                    { y:8,color:'#43AED4'},
                    { y:25,color:'#43AED4'}
                ];
                
                var updatedChannelData = [
                    { y:24,color:'#43AED4'},
                    { y:20,color:'#43AED4'},
                    { y:17,color:'#43AED4'},
                    { y:21,color:'#43AED4'},
                    { y:24,color:'#43AED4'},
                    { y:14,color:'#43AED4'}      
                ];
                
                var initialDurationData = [
                    [1437759332539,101],[1437845732540,99],[1437932132540,97],[1438018532540,95],[1438104932540,93],[1438191332540,91],[1438277732540,92],[1438364132540,90],[1438450532540,91],[1438536932540,89],
                    [1438623332540,87],[1438709732540,85],[1438796132540,83],[1438882532540,84],[1438968932540,82],[1439055332540,83],[1439141732540,84],[1439228132540,82],[1439314532540,83],[1439400932540,81],
                    [1439487332540,82],[1439573732540,83],[1439660132540,84],[1439746532540,82],[1439832932540,80],[1439919332540,78],[1440005732540,79],[1440092132540,80],[1440178532540,81],[1440264932540,82],
                    [1440351332540,83],[1440437732540,84],[1440524132540,82],[1440610532540,83],[1440696932540,81],[1440783332540,82],[1440869732540,83],[1440956132540,81],[1441042532540,82],[1441128932540,80],
                    [1441215332540,78],[1441301732540,79],[1441388132540,77],[1441474532540,78],[1441560932540,76],[1441647332540,74],[1441733732540,72],[1441820132540,73],[1441906532540,74],[1441992932540,72],
                    [1442079332540,70],[1442165732540,71],[1442252132540,72],[1442338532540,70],[1442424932540,71],[1442511332540,72],[1442597732540,70],[1442684132540,71],[1442770532540,69],[1442856932540,67],
                    [1442943332540,65],[1443029732540,63],[1443116132540,61],[1443202532540,59],[1443288932540,57],[1443375332540,55],[1443461732540,53],[1443548132540,54],[1443634532540,52],[1443720932540,50],
                    [1443807332540,48],[1443893732540,48],[1443980132540,48],[1444066532540,48],[1444152932540,48],[1444239332540,49],[1444325732540,49],[1444412132540,50],[1444498532540,51],[1444584932540,49],
                    [1444671332540,50],[1444757732540,48],[1444844132540,48],[1444930532540,48],[1445016932540,49],[1445103332540,49],[1445189732540,50],[1445276132540,48],[1445362532540,49],[1445448932540,50],
                    [1445535332540,48],[1445621732540,48],[1445708132540,49],[1445794532540,50],[1445880932540,51],[1445967332540,52],[1446053732540,50],[1446140132540,48],[1446226532540,48],[1446312932540,48],
                    [1446402932540,49],[1446489332540,50],[1446575732540,48],[1446662132540,48],[1446748532540,48],[1446834932540,49],[1446921332540,50],[1447007732540,51],[1447094132540,52],[1447180532540,53],
                    [1447266932540,51],[1447353332540,49],[1447439732540,50],[1447526132540,51],[1447612532540,49],[1447698932540,49],[1447785332540,49],[1447871732540,50],[1447958132540,48],[1448044532540,49],
                    [1448130932540,50],[1448217332540,51],[1448303732540,49],[1448390132540,50],[1448476532540,48],[1448562932540,48],[1448649332540,48],[1448735732540,49],[1448822132540,50],[1448908532540,51],
                    [1448994932540,52],[1449081332540,53],[1449167732540,51],[1449254132540,52],[1449340532540,53],[1449426932540,54],[1449513332540,55],[1449599732540,53],[1449686132540,54],[1449772532540,55],
                    [1449858932540,53],[1449945332540,51],[1450031732540,52],[1450118132540,50],[1450204532540,51],[1450290932540,52],[1450377332540,53],[1450463732540,54],[1450550132540,55],[1450636532540,53],
                    [1450722932540,51],[1450809332540,52],[1450895732540,50],[1450982132540,48],[1451068532540,48],[1451154932540,48],[1451241332540,48],[1451327732540,49],[1451414132540,50],[1451500532540,51],
                    [1451586932540,52],[1451673332540,53],[1451759732540,51],[1451846132540,52],[1451932532540,50],[1452018932540,51],[1452105332540,49],[1452191732540,50],[1452278132540,51],[1452364532540,52],
                    [1452450932540,50],[1452537332540,48],[1452623732540,48],[1452710132540,48],[1452796532540,48],[1452882932540,48],[1452969332540,49],[1453055732540,49],[1453142132540,50],[1453228532540,48]
                ];
                
                var AVAILABILITY_CHART_CONFIG = {
                    title: 'Availability',
                    initialData: initialAvailabilityData
                };
                
                var CAPACITY_CHART_CONFIG = {
                    title: 'Capacity',
                    initialData: initialCapacityData
                };
                
                var CHANNEL_CHART_CONFIG = {
                    title: 'Open Cases By Channel',
                    initialData: initialChannelData
                };
                
                var DURATION_CHART_CONFIG = {
                    title: 'Average Case Duration',
                    initialData: initialDurationData
                };
                
                // Availability Chart
                drawPieChart('#graph1', AVAILABILITY_CHART_CONFIG, function (chart) {
                    setTimeout(function () {
                        chart.series[0].setData(updatedAvailabilityData);
                        animateUpdate('update', nUsers, 25);
                    }, 1000);
                });
                
                // Capacity Chart
                drawPieChart('#graph2', CAPACITY_CHART_CONFIG, function (chart) {
                    // find the one with the name "High", that's the percent
                    var updatedPercentage = updatedCapacityData.filter(function (item) {
                        return item.name === 'High';
                    })[0].y;
                    
                    setTimeout(function () {
                        chart.series[0].setData(updatedCapacityData);
                        animateUpdate('update2', 85, 25);
                    }, 1500);
                });
                
                drawBarChart('#graph3', CHANNEL_CHART_CONFIG, function (chart) {
                    setTimeout(function () {
                        chart.series[0].setData(updatedChannelData);
                    }, 2000);
                });
                
                drawLineChart('#graph4', DURATION_CHART_CONFIG, function (chart) {
                    console.log('Average Case Duration Graph Drawn');
                });
                
                function getTitleObj(confTitle) {
                    return {
                        text: confTitle,
                        align: 'left',
                        style: {
                            'fontFamily':'Salesforce Sans',
                            'color':'#16325c',
                            'fontSize':'14px'
                        }
                    }
                }
                
                function drawPieChart(selector, configuration, callback) {
                    $(selector).highcharts({
                        chart: { type: 'pie', height: 270, marginTop: 20 },
                        title: getTitleObj(configuration.title),
                        plotOptions: {
                            pie: {
                                shadow: false,
                                center: ['50%', '50%'],
                                allowPointSelect: true,
                                cursor: 'pointer',
                                borderWidth: 0,
                                dataLabels: { enabled: false }
                            }
                        },
                        tooltip: { enabled: false },
                        series: [{
                            name: configuration.title,
                            data: configuration.initialData,
                            size: '80%',
                            innerSize: '70%'
                        }]
                    }, function(chart) {
                        $('text:contains("Highcharts.com")').remove();
                        if(callback) callback(chart);
                    });
                };
                
                function drawBarChart(selector, configuration, callback) {
                    $(selector).highcharts({
                        chart: { type: 'bar', marginTop:100, marginBottom:55, height:270 },
                        title: getTitleObj(configuration.title),
                        xAxis: { categories: ['Phone', 'Chat', 'Email', 'Social', 'SMS', 'IoT'] },
                        yAxis: { min: 0, tickInterval:10, title: { text: '' }, opposite:true },
                        legend: { enabled:false },
                        tooltip: { enabled: false },
                        plotOptions: {
                            series: {
                                stacking: 'normal',
                                pointPadding: 0,
                                groupPadding: 0.009,
                                dataLabels: {
                                    enabled: true,
                                    color: '#fff',
                                    style: {
                                        'fontFamily':'Salesforce Sans',
                                        'fontSize':'14px',
                                        'textShadow':'0',
                                        'marginRight':'10px',
                                        'fontWeight':'normal'
                                    },
                                    reserveSpace:false,
                                    formatter: function() { return this.y },
                                    inside: true,
                                    rotation: 0,
                                    shadow: false,
                                    align: 'right',
                                    padding: 10
                                }
                            }
                        },
                        series: [{ data: configuration.initialData, color: '#4DB7DA' }]
                    }, function(chart) {
                        $('text:contains("Highcharts.com")').remove();
                        if(callback) callback(chart);
                    });
                };
                
                function drawLineChart(selector, configuration, callback) {
                    $(selector).highcharts({
                        chart: {
                            zoomType: 'x',
                            height:230,
                            marginTop:70
                        },
                        title: getTitleObj(configuration.title),
                        xAxis: { type: 'datetime' },
                        yAxis:{ title:'Duration' },
                        legend: { enabled: false },
                        tooltip: { enabled: false },
                        plotOptions: {
                            area: {
                                fillColor: "rgba(238, 248, 251, 0.8)",
                                marker: { radius: 2 },
                                lineColor: '#62BFDE',
                                lineWidth: 2,
                                states: { hover: { lineWidth: 1 } },
                                threshold: null
                            }
                        },
                        series: [{
                            fillOpacity: 0.6,
                            type: 'area',
                            name: 'Case Duration',
                            data: configuration.initialData
                        }]
                    }, function(chart) {
                        $('text:contains("Highcharts.com")').remove();
                        if(callback) callback(chart);
                    });
                };
                
                function animateUpdate(id, end, speed) {
                    var element = $('#' + id);
                    var curr = parseInt(element.text());
                    var isPercentage = element.text().indexOf('%') > -1;
                    
                    var timer = setInterval(function() {
                        if(curr > end) curr--;
                        if(curr < end) curr++;
                        
                        element.text(curr + (isPercentage ? '%' : ''));
                        if (curr == end) clearInterval(timer);
                        
                    }, speed);
                }
                
            };
            
            fetchUsers(function (usersList) {
                addTableRows(usersList, updateTimers);
                addCharts(usersList);
            });
            /* -------------------------------------------------------------------- TAB FOR AGENT js --------------------------------------------------------------------------------- */
            
            
            
            
            
            
            </script>
            <!-- / JAVASCRIPT -->
        </body>
    </html>
</apex:page>