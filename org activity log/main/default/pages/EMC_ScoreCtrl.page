<apex:page contentType="application/javascript">
    
    function ScoreController($scope, SFDC, Mixpanel){
        let leadScoreMinMax = {
            'Unqualified': {
                'min': 1,
                'max': 25,
                'insights': [
                ]
            },
            'New': {
                'min': 20,
                'max': 50,
                'insights': [
                ]
            },
            'Working' : {
                'min': 40,
                'max': 65,
                'insights': [
                ]
            },
            'Contacted': {
                'min': 55,
                'max': 75,
                'insights': [
                ]
            },
            'Draft': {
                'min': 65,
                'max': 80,
                'insights': [
                ]
            },
            'Submitted': {
                'min': 75,
                'max': 90,
                'insights': [
                ]
            },
            'Pending': {
                'min': 60,
                'max': 80,
                'insights': [
                ]
            },
            'Approved': {
                'min': 75,
                'max': 90,
                'insights': [
                ]
            },
            'Qualified':{
                'min': 85,
                'max': 99,
                'insights': [
                ]
            },
            'Qualified - Convert':{
                'min': 85,
                'max': 99,
                'insights': [
                ]
            }
        }
        
        let opportunityScoreMinMax = {
            'Closed Lost': {
                'min': 1,
                'max': 25,
                'insights': [
                ]
            },
            'Qualification': {
                'min': 20,
                'max': 34,
                'insights': [
                ]
            },
            'Discovery': {
                'min': 35,
                'max': 74,
                'insights': [
                ]
            },
            'Proposal/Quote': {
                'min': 75,
                'max': 89,
                'insights': [
                ]
            },
            'Negotiation' : {
                'min': 85,
                'max': 99,
                'insights': [
                ]
            },
            'Closed Won':{
                'min': 90,
                'max': 99,
                'insights': [
                ]
            }
        }
        
        let leadModel = {
            
        }
        
        let opportunityModel = {
            
        }
        
        $scope.init = function(){
        }
        
        $scope.scoreLeads = function(){
    		if(!confirm('Running this will wipe out existing score and insights. Continue?')) return true;
    		$scope.showLoading(true,'Generating Data');
            $scope.getLeads()
            .then(function(res){
                if(verbose) console.log('Leads', res.data.records)
                $scope.leads = res.data.records;
            	return $scope.generateAllLeadScores($scope.leads);
            })
            .finally(function(){
            	if(verbose) console.log('SUCCESS', res)
    			$scope.createToast('Leads Scored', 'success');
    			$scope.showLoading(false, 'Generating Data');
            })
            .catch(function(err){
            	console.log('ERROR',err);
            })
        }
        
        $scope.scoreOpportunities = function(){
    		if(!confirm('Running this will wipe out existing score and insights. Continue?')) return true;
    		$scope.showLoading(true, 'Generating Data');
            $scope.getOpportunities()
            .then(function(res){
                if(verbose) console.log('Opportunities', res.data.records)
                $scope.opportunties = res.data.records;
            	return $scope.generateAllOpportunityScores($scope.opportunties);
            })
            .finally(function(){
            	if(verbose) console.log('SUCCESS', res)
    			$scope.createToast('Opportunties Scored', 'success');
    			$scope.showLoading(false, 'Generating Data');
            })
            .catch(function(err){
            	console.log('ERROR',err);
            })
        }
        
        $scope.scoreAll = function(){
    		if(!confirm('Running this will wipe out existing score and insights. Continue?')) return true;
    		$scope.showLoading(true,'Generating Data');
            $scope.getLeads()
            .then(function(res){
                if(verbose) console.log('Leads', res.data.records)
                $scope.leads = res.data.records;
            	return $scope.generateAllLeadScores($scope.leads);
            })
            .then(function(res){
            	return $scope.getOpportunities();
            })
            .then(function(res){
                if(verbose) console.log('Opportunities', res.data.records)
                $scope.opportunties = res.data.records;
            	return $scope.generateAllOpportunityScores($scope.opportunties);
            })
            .finally(function(){
            	if(verbose) console.log('SUCCESS', res)
    			$scope.createToast('Leads and Opportunties Scored', 'success');
    			$scope.showLoading(false, 'Generating Data');
            })
            .catch(function(err){
            	console.log('ERROR',err);
            })
        }
        
        $scope.getLeads = function(){
            let query = [
                'Select Id, Status',
                'From Lead',
                'Where IsConverted = false'
            ]
            
            return SFDC.query(query.join(' '))
        }
        
        $scope.getOpportunities = function(){
            let query = [
                'Select Id, StageName',
                'From Opportunity'
            ]
            
            return SFDC.query(query.join(' '))
        }
        
        $scope.getModelFactor = function(){
            let query = [
                'Select Id',
                'From ModelFactor'
            ]
            
            return SFDC.query(query.join(' '))
        }
        
        $scope.upsertModelFactor = function(){
            return new Promise(function(resolve,reject){
                resolve()
            })
        }
        
        $scope.getLeadIQ = function(){
            let query = [
                'Select Id',
                'From LeadIQ'
            ]
            
            return SFDC.query(query.join(' '))
        }
        
        //Todo
        $scope.upsertLeadIQ = function(){
            return new Promise(function(resolve,reject){
                resolve()
            })
        }
        
        $scope.getScoreIntelligence = function(){
            let query = [
                'Select Id, BaseId, Insight',
                'From ScoreIntelligence'
            ]
            
            return SFDC.query(query.join(' '))
        }
        
        $scope.upsertScoreIntelligence = function(records){
        	let promises = []
            
            records.map(function(record){
            	promises.push(SFDC.delete(sobject, record))
            })
            
            return Promise.all(promises)
        }
        
        $scope.getLeadScores = function(leads){
            let query = [
                'Select Id, BaseId',
                'From ScoreIntelligence'
            ]
            
            return SFDC.query(query.join(' '))
        }
        
        $scope.setLeadScores = function(){
            let query = [
                'Select Id',
                'From ScoreIntelligence'
            ]
            
            return SFDC.query(query.join(' '))
        }
        
        $scope.upsertLeadScores = function(){
            return new Promise(function(resolve,reject){
                resolve()
            })
        }
        
        $scope.getOpportunityScores = function(){
            let query = [
                'Select Id, BaseId',
                'From OpportunityScore'
            ]
            
            return SFDC.query(query.join(' '))
        }
        
        $scope.generateAllLeadScores = function(leads){
            let scores = [];
            
            leads.map(function(lead){
                if(leadScoreMinMax.hasOwnProperty(lead.Status)){
                    let min = leadScoreMinMax[lead.Status].min
                    let max = leadScoreMinMax[lead.Status].max
                    
                    let scoreIntelligence = {
                        'BaseId': lead.Id, 
                        'Score': Math.floor(Math.random() * (max - min)) + min,
    					'LastModifiedTimeOnRecord': new Date().getTime()
                    }
                    
                    scores.push(scoreIntelligence);
                }
            })
            
            return $scope.upsertRecords('ScoreIntelligence', scores, [], []);
        }
        
        $scope.generateAllOpportunityScores = function(opportunities){
            let scores = [];
            
            opportunities.map(function(opportunity){
                if(opportunityScoreMinMax.hasOwnProperty(opportunity.StageName)){
                    let min = opportunityScoreMinMax[opportunity.StageName].min
                    let max = opportunityScoreMinMax[opportunity.StageName].max
                    scores.push({'BaseId': opportunity.Id, 'Score': Math.floor(Math.random() * (max - min)) + min });
                }
            })
            
            return $scope.upsertRecords('OpportunityScore', scores, [], []);
        }
        
        $scope.upsertRecords = function(sobject, records, aUnupdateable, aUncreateable){
        	let promises = [];
            let count = 1;
            
            records.map(function(record){
            	promises.push(SFDC.upsert(sobject, record, aUnupdateable, aUncreateable))
                if(verbose) console.log(`Generating Request for ${sobject}, Progress ${count} of ${records.length}`);
                count++;
            })
        }
        
        $scope.init()
    }
    
</apex:page>