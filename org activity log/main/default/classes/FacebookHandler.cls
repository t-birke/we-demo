public class FacebookHandler implements Auth.RegistrationHandler{
    
    public User createUser(Id portalId, Auth.UserData data){

        String url  = extractImageUrl(data.attributeMap.get('picture'));
        String userFbId = data.attributeMap.get('id');
        String email = data.attributeMap.get('email');
        Integer friendCount = extractFriendCount(data.attributeMap.get('friends'));
        

        User[] users = [SELECT Id, ContactId FROM User WHERE FederationIdentifier = :email];


        if (users.size() == 0) {

           //grab FB image
           Blob b = getImage(url); 

           Account newPersonAccount = new Account();

           RecordType personAccountRecordType = [select id,name,sobjectType,ispersontype from recordType where ispersontype=true and sobjectType='account' limit 1];
            
           // for person accounts we can not update the Name field instead we have to update the FirstName and LastName individually
           newPersonAccount.FirstName = data.firstName;
           newPersonAccount.LastName = data.lastName;
           newPersonAccount.RecordType = personAccountRecordType;
           
           insert newPersonAccount;

          //query to personcontact id generated by platform after saving person account above
          Account a = [Select PersonContactId From Account Where Id =:newPersonAccount.Id];
           
          Contact c = [Select Id, Email From Contact Where Id =:a.PersonContactId];
                 
          c.Email = email;
          c.Facebook_Picture__c = url;
          c.Number_of_Friends__c = friendCount;
          c.FB_Id_for_Identity__c = userFbId;
            
          upsert (c);
            
          System.debug('updated contact: ' + c);

           //profile with customer community license 
           Profile p = [select id from Profile where Name = 'Community Member - Login-based'];


           User u = new User(Alias = data.lastName.length()>5?data.lastName.substring(0,5):data.lastName, Email=data.email,FederationIdentifier=data.email, 
                        EmailEncodingKey='UTF-8', FirstName=data.firstName, LastName=data.lastName, LanguageLocaleKey='en_US', 
                        LocaleSidKey='en_US', ProfileId = p.Id, 
                        TimeZoneSidKey='Australia/Sydney', UserName=data.firstName+data.lastName+'@fb.demo', ContactId = a.PersonContactId);

           insert u;
           
           //set image
           if (b!=null) { 
              ConnectApi.ChatterUsers.setPhoto(null, u.Id, new ConnectApi.BinaryInput(b,'image/jpg','user.jpg'));
           }
   
           return u;

        }
        else if (users.size() == 1)
        {
          
           User u = users[0];
          //  System.debug('User Id: ' + u.Id);
                     
           updateContactInfo(u, data);

           //return the user to login as
           return u;
        }

        return null;    
        
    }
    
    public void updateUser(Id userId, Id portalId, Auth.UserData data){
        
        System.debug('User Id: ' + userId);
        
        User[] users = [SELECT Id, ContactId, FederationIdentifier FROM User WHERE Id = :userId]; 
        
        if (users.size() == 1) {
            
           User u = users[0];
            
        //   System.Debug('federation Id: ' + u.FederationIdentifier);
           
           updateContactInfo(u, data);
            
        }
        
        //TODO: Update user's name when it has changed on login to an existing user
    }
    
    public void updateContactInfo(User user, Auth.UserData data){

          String url  = extractImageUrl(data.attributeMap.get('picture'));
          String userFbId = data.attributeMap.get('id');
          String email = data.attributeMap.get('email');
          Integer friendCount = extractFriendCount(data.attributeMap.get('friends'));
           
          Contact c = [Select Id, Email From Contact Where Id =:user.contactId];
                 
          c.Email = email;
          c.Facebook_Picture__c = url;
          c.Number_of_Friends__c = friendCount;
          c.FB_Id_for_Identity__c = userFbId;
        
          setImage(user.Id, url);
          
          upsert (c);
   
          System.debug('updated contact: ' + c);
    }
    
    public void setImage(String userId, String imageUrl) {
        
        Blob b = getImage(imageUrl);
        if (b!=null) {
          ConnectApi.ChatterUsers.setPhoto(null, userId, new ConnectApi.BinaryInput(b,'image/jpg','user.jpg'));
        }
    }


    public String extractImageUrl(String imageUrl) {
        
        String url = imageUrl.replace ('{', '');
        url = url.replace ('}', '');
        String[] dataArray = url.split(',', 2);
        dataArray = dataArray[1].split('=',2);
        url = dataArray[1];
        return url;

    }

    public Integer extractFriendCount(String friends) {
    
       // System.debug('friends: ' + friends);
        
        String countString = friends.replace ('{', '');
        countString = friends.replace ('}', '');
        String[] dataArray = countString.split(',', 2);
        dataArray = dataArray[0].split('=',3);
        countString = dataArray[2];

        return Integer.valueOf(countString);
    }

    
    public Blob getImage(String imageUrl) {

       if (String.isNotBlank(imageUrl)) {

          System.debug('imageUrl: ' + imageUrl);
          HttpRequest req = new HttpRequest();
          req.setEndpoint(imageUrl);
          req.setMethod('GET');
          HttpResponse res = new Http().send(req);
          return res.getBodyAsBlob();
        }

        return null;
    }

}